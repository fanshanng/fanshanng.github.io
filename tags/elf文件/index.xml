<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ELF文件 on 梵殇-fanshanng</title>
        <link>https://fanshanng.cn/tags/elf%E6%96%87%E4%BB%B6/</link>
        <description>Recent content in ELF文件 on 梵殇-fanshanng</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>梵殇-fanshanng</copyright>
        <lastBuildDate>Thu, 25 Sep 2025 22:07:51 +0800</lastBuildDate><atom:link href="https://fanshanng.cn/tags/elf%E6%96%87%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>安卓逆向入门六：so(ELF)文件分析与ARM基础知识</title>
        <link>https://fanshanng.cn/p/ar6/</link>
        <pubDate>Thu, 25 Sep 2025 22:07:51 +0800</pubDate>
        
        <guid>https://fanshanng.cn/p/ar6/</guid>
        <description>&lt;img src="https://raw.githubusercontent.com/fanshanng/blog_picture/master/20250925233532.png" alt="Featured image of post 安卓逆向入门六：so(ELF)文件分析与ARM基础知识" /&gt;&lt;p&gt;关键词：ELF文件入门、so文件分析 、ARM基础知识&lt;/p&gt;
&lt;h1 id=&#34;0x00-elf文件入门&#34;&gt;0x00 ELF文件入门
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ELF&lt;/strong&gt;（&lt;code&gt;Executable and Linkable Format&lt;/code&gt;）是一种&lt;em&gt;&lt;strong&gt;可执行&lt;/strong&gt;&lt;/em&gt;和&lt;em&gt;&lt;strong&gt;可链接&lt;/strong&gt;&lt;/em&gt;的文件格式，是linux底下二进制文件，可以理解为windows下的&lt;code&gt;PE文件&lt;/code&gt;，在Android中可以比作&lt;code&gt;SO&lt;/code&gt;，方便函数的移植，在常用于保护Android软件，增加逆向难度。其核心价值在于支持程序的&lt;strong&gt;执行&lt;/strong&gt;（如二进制程序运行、动态库加载）和&lt;strong&gt;链接&lt;/strong&gt;（编译过程中的模块组合），是跨平台二进制兼容的基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ELF文件的主要组成部分包括：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ELF Header&lt;/code&gt;：文件头，描述文件的基本信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Program Header Table&lt;/code&gt;：程序头表，描述进程映像的布局&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Section Header Table&lt;/code&gt;：节区头表，描述文件的各个节区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序头表与分段头表引用的数据，比如 .text .data。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ctf-wiki.org/executable/elf/structure/figure/object_file_format.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elf-header文件头&#34;&gt;ELF Header（文件头）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ELF Header 描述了 ELF 文件的概要信息，利用这个数据结构可以索引到 ELF 文件的全部信息，是ELF 文件的 &amp;ldquo;总目录&amp;rdquo;，存储文件的基础元信息，可通过这些信息索引到其他所有结构。32 位 ELF 的文件头结构定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;EI_NIDENT&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;char&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;e_ident&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;EI_NIDENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_type&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_machine&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_version&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Addr&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_entry&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Off&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;e_phoff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Off&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;e_shoff&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_flags&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_ehsize&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_phentsize&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_phnum&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_shentsize&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_shnum&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Half&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;e_shstrndx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Elf32_Ehdr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ELF 头中的 &lt;code&gt;e_shoff&lt;/code&gt; 项给出了&lt;strong&gt;从文件开头到节头表位置的字节偏移&lt;/strong&gt;。&lt;code&gt;e_shnum&lt;/code&gt; 告诉了我们节头表包含的&lt;strong&gt;项数&lt;/strong&gt;；&lt;code&gt;e_shentsize&lt;/code&gt; 给出了每一项的&lt;strong&gt;字节大小&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;program-header-table程序头表&#34;&gt;Program Header Table（程序头表）
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Program Header Table&lt;/strong&gt; 是一个结构体数组，每一个元素的类型是 &lt;code&gt;Elf32_Phdr&lt;/code&gt;，描述了一个段或者其它系统在准备程序执行时所需要的信息。&lt;/p&gt;
&lt;p&gt;其中，ELF 头中的 &lt;code&gt;e_phentsize&lt;/code&gt; 和 &lt;code&gt;e_phnum&lt;/code&gt; 指定了该数组每个元素的大小以及元素个数。一个目标文件的段包含一个或者多个节。&lt;strong&gt;程序的头部只有对于可执行文件和共享目标文件有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以说，&lt;strong&gt;Program Header Table&lt;/strong&gt; 就是专门为 ELF 文件运行时中的段所准备的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Elf32_Phdr&lt;/code&gt;的定义如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_type&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Off&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;p_offset&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Addr&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_vaddr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Addr&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_paddr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_filesz&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_memsz&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_flags&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;p_align&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Elf32_Phdr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;字段说明&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;字段&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_type&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段为段的类型，或者表明了该结构的相关信息。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_offset&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段给出了从文件开始到该段开头的第一个字节的偏移。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_vaddr&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段给出了该段第一个字节在内存中的虚拟地址。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_paddr&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段仅用于物理地址寻址相关的系统中， 由于 “System V” 忽略了应用程序的物理寻址，可执行文件和共享目标文件的该项内容并未被限定。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_filesz&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段给出了文件镜像中该段的大小，可能为 0。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_memsz&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段给出了内存镜像中该段的大小，可能为 0。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_flags&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;该字段给出了与段相关的标记。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;p_align&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;可加载的程序的段的 &lt;code&gt;p_vaddr&lt;/code&gt; 以及&lt;code&gt; p_offset&lt;/code&gt; 的大小必须是&lt;code&gt; page&lt;/code&gt; 的整数倍。该成员给出了段在文件以及内存中的对齐方式。如果该值为 0 或 1 的话，表示不需要对齐。除此之外，p_align 应该是 2 的整数指数次方，并且 &lt;code&gt;p_vaddr&lt;/code&gt; 与 &lt;code&gt;p_offset&lt;/code&gt; 在模 &lt;code&gt;p_align&lt;/code&gt; 的意义下，应该相等。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;核心意义&lt;/strong&gt;：操作系统加载 ELF 文件时，根据程序头表将 &amp;ldquo;段&amp;rdquo; 映射到内存，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p_type=PT_LOAD&lt;/code&gt;的段会被加载到&lt;code&gt;p_vaddr&lt;/code&gt;指定的内存地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_flags=0x5&lt;/code&gt;（R+X）通常对应代码段（可执行且只读），&lt;code&gt;p_flags=0x6&lt;/code&gt;（R+W）对应数据段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-header-table节区头表&#34;&gt;Section Header Table（节区头表）
&lt;/h2&gt;&lt;p&gt;该结构用于定位 ELF 文件中的每个节区的具体位置。描述 ELF 文件在&lt;strong&gt;编译链接时&lt;/strong&gt;的结构（即 &amp;ldquo;节区&amp;rdquo; 信息），用于调试、静态分析等场景。每个条目对应一个&lt;code&gt;Elf32_Shdr&lt;/code&gt;结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_name&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_type&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_flags&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Addr&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_addr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Off&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;sh_offset&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_size&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_link&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_info&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_addralign&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;ELF32_Word&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;sh_entsize&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Elf32_Shdr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;成员&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;
          &lt;th&gt;取值&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_name&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_name&lt;/code&gt;节名称，是节区头字符串表节区中（Section Header String Table Section）的索引，因此该字段实际是一个数值。在字符串表中的具体内容是以 NULL 结尾的字符串。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无名称&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_type&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_type&lt;/code&gt;根据节的内容和语义进行分类，具体的类型下面会介绍。&lt;/td&gt;
          &lt;td&gt;SHT_NULL&lt;/td&gt;
          &lt;td&gt;限制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_flags&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_flags&lt;/code&gt;每一比特代表不同的标志，描述节是否可写，可执行，需要分配内存等属性。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无标志&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_addr&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_addr&lt;/code&gt;如果节区将出现在进程的内存映像中，此成员给出节区的第一个字节应该在进程镜像中的位置。否则，此字段为 0。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无地址&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_offset&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_offset&lt;/code&gt;给出节区的第一个字节与文件开始处之间的偏移。SHT_NOBITS 类型的节区不占用文件的空间，因此其 sh_offset 成员给出的是概念性的偏移。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无文件偏移&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_size&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_size&lt;/code&gt;此成员给出节区的字节大小。除非节区的类型是 SHT_NOBITS ，否则该节占用文件中的 &lt;code&gt;sh_size&lt;/code&gt; 字节。类型为 SHT_NOBITS 的节区长度可能非零，不过却不占用文件中的空间。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无大小&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_link&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_link&lt;/code&gt;此成员给出节区头部表索引链接，其具体的解释依赖于节区类型。&lt;/td&gt;
          &lt;td&gt;SHN_UNDEF&lt;/td&gt;
          &lt;td&gt;无链接信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_info&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_info&lt;/code&gt;此成员给出附加信息，其解释依赖于节区类型。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无辅助信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_addralign&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;sh_addralign&lt;/code&gt;某些节区的地址需要对齐。例如，如果一个节区有一个 doubleword 类型的变量，那么系统必须保证整个节区按双字对齐。也就是说，sh_addr%sh_addralign=0。目前它仅允许为 0，以及 2 的正整数幂数。 0 和 1 表示没有对齐约束。&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;无对齐要求&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;常见节区sections&#34;&gt;常见节区（Sections）
&lt;/h2&gt;&lt;p&gt;节区是 ELF 文件的实际数据载体，常见类型及作用如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;节区名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.text&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;代码段，存放程序的指令&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.data&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据段，存放已初始化的全局变量和静态变量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.rodata&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;只读数据段，存放只读数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.bss&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;未初始化数据段，存放未初始化的全局变量和静态变量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.symtab&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;符号表，存放符号信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.strtab&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;字符串表，存放字符串数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.dynsym&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;动态符号表，存放动态链接需要的符号信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.dynamic&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;动态链接信息，存放动态链接器需要的信息&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;段与节区的关系&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;段（Segment）&lt;/strong&gt;：面向运行时，由一个或多个节区组成（如&lt;code&gt;.text&lt;/code&gt;和&lt;code&gt;.rodata&lt;/code&gt;可合并为一个 &amp;ldquo;代码段&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节区（Section）&lt;/strong&gt;：面向编译时，按功能划分的最小数据单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：一个&lt;code&gt;PT_LOAD&lt;/code&gt;段可能包含&lt;code&gt;.text&lt;/code&gt;（代码）和&lt;code&gt;.rodata&lt;/code&gt;（只读数据）两个节区，共同映射到内存的只读可执行区域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ctf-wiki.org/executable/elf/structure/figure/ELF-Walkthrough.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;0x01-arm基础知识&#34;&gt;0x01 ARM基础知识
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;x86、arm、RISC-V&lt;/strong&gt;&amp;rdquo; 都是 &lt;strong&gt;指令集架构 ( CPU架构 )&lt;/strong&gt;。ARM 是主流的 RISC（精简指令集）架构，广泛用于嵌入式设备（如 Android 手机）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指令集特点&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定指令长度（32 位 ARM 指令，Thumb 模式为 16 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大部分指令可条件执行（如&lt;code&gt;ADDNE R0, R1, R2&lt;/code&gt;：仅当标志位不为 0 时执行加法）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄存器操作优先（算术 / 逻辑运算通常基于寄存器，内存访问需专用指令）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;核心寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	ARM32 架构有 16 个通用寄存器（&lt;code&gt;R0-R15&lt;/code&gt;），其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R0-R3&lt;/code&gt;：函数调用参数 / 返回值寄存器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R4-R11&lt;/code&gt;：通用寄存器（需手动保存）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R12&lt;/code&gt;（IP）：临时寄存器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R13&lt;/code&gt;（SP）：栈指针寄存器（指向栈顶）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R14&lt;/code&gt;（LR）：链接寄存器（存储函数返回地址）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R15&lt;/code&gt;（PC）：程序计数器（存储下一条执行的指令地址）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见寻址方式&#34;&gt;常见寻址方式
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;寻址方式&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;立即数寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;直接使用立即数值作为操作数，例如：&lt;code&gt;MOV R0, #5&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器直接寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用寄存器中的值作为操作数，例如：&lt;code&gt;MOV R0, R1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器间接寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用寄存器中的值作为内存地址，访问该地址中的数据，例如：&lt;code&gt;LDR R0, [R1]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器相对寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用寄存器中的值加上一个立即偏移量作为内存地址，例如：&lt;code&gt;LDR R0, [R1, #4]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器变址寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用两个寄存器中的值相加作为内存地址，例如：&lt;code&gt;LDR R0, [R1, R2]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;带有变址寄存器的寄存器相对寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用寄存器中的值加上另一个寄存器的值乘以一个比例因子作为内存地址，例如：&lt;code&gt;LDR R0, [R1, R2, LSL #2]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;堆栈寻址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用堆栈指针寄存器（如SP）进行操作，例如：&lt;code&gt;PUSH {R0, R1}&lt;/code&gt; 或 &lt;code&gt;POP {R0, R1}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;压栈和出栈指令&#34;&gt;压栈和出栈指令
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;指令类型&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;指令示例&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;压栈&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;PUSH {R0, R1}&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;将寄存器R0和R1的内容压入堆栈中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;压栈&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;PUSH {R0-R5}&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;将寄存器R0到R5的内容压入堆栈中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;压栈&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;STMDB SP!, {R0-R5}&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;将寄存器R0到R5的内容压入堆栈中（与PUSH等效）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;出栈&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;POP {R0, R1}&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;从堆栈中弹出数据，恢复到寄存器R0和R1中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;出栈&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;POP {R0-R5}&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;从堆栈中弹出数据，恢复到寄存器R0到R5中&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;跳转指令&#34;&gt;跳转指令
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;指令类型&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;指令示例&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;无条件跳转&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;B label&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;无条件跳转到标签&lt;code&gt;label&lt;/code&gt;指向的位置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;子程序调用&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;BL label&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;调用子程序，将当前指令的下一条指令地址存入链接寄存器（LR），然后跳转到标签&lt;code&gt;label&lt;/code&gt;指向的位置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;子程序返回&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;BX LR&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;返回子程序调用前的位置，跳转到链接寄存器（LR）中存储的地址&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器跳转&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;BX Rn&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;跳转到寄存器Rn中存储的地址&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;算术运算指令&#34;&gt;算术运算指令
&lt;/h2&gt;&lt;p&gt;汇编中也可以进行算术运算， 比如加减乘除，常用的运算指令用法如表 所示：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;指令&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;计算公式&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;备注&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;ADD Rd, Rn, Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn + Rm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;加法运算，指令为 ADD&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;ADD Rd, Rn, #immed&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn + #immed&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;加法运算，指令为 ADD&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;ADC Rd, Rn, Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn + Rm + 进位&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;带进位的加法运算，指令为 ADC&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;ADC Rd, Rn, #immed&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn + #immed + 进位&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;带进位的加法运算，指令为 ADC&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SUB Rd, Rn, Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn - Rm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;减法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SUB Rd, #immed&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rd - #immed&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;减法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SUB Rd, Rn, #immed&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn - #immed&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;减法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SBC Rd, Rn, #immed&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn - #immed - 借位&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;带借位的减法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SBC Rd, Rn ,Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn - Rm - 借位&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;带借位的减法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;MUL Rd, Rn, Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn * Rm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;乘法 (32 位)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;UDIV Rd, Rn, Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn / Rm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;无符号除法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SDIV Rd, Rn, Rm&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Rd = Rn / Rm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;有符号除法&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;逻辑运算&#34;&gt;逻辑运算
&lt;/h2&gt;&lt;p&gt;汇编语言的时候也可以使用逻辑运算指令，常用的运算指令用法如表 所示：
&lt;img src=&#34;http://pic.rmb.bdstatic.com/bjh/35d0832fb2523805c2a2165ec5458caa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;0x02-android-so文件分析&#34;&gt;0x02 Android so文件分析
&lt;/h1&gt;&lt;h2 id=&#34;1so-文件概述&#34;&gt;1.SO 文件概述
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SO&lt;/strong&gt; 文件是 Unix/Linux 系统中的动态库文件，被称为共享目标文件（&lt;strong&gt;Shared Object File&lt;/strong&gt;），后缀名为 &lt;code&gt;.so&lt;/code&gt;，它是 ELF 的一种，另外属于 &lt;strong&gt;ELF&lt;/strong&gt; 类型的还有可重定位文件（Relocatable File）以及核心转储文件（Core Dump File）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SO 文件通常用于提高开发效率、方便快速移植代码，以及保护 Android 应用的核心逻辑，增加逆向工程的难度。不同的 CPU 架构（如 ARM、x86 等）需要不同版本的 SO 文件来适配其指令集和运行环境。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;ELF 文件类型&lt;/th&gt;
          &lt;th&gt;典型后缀&lt;/th&gt;
          &lt;th&gt;核心用途&lt;/th&gt;
          &lt;th&gt;逆向 / 开发场景举例&lt;/th&gt;
          &lt;th&gt;与 ARM 的关联&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;可执行文件&lt;/td&gt;
          &lt;td&gt;无（如&lt;code&gt;/bin/ls&lt;/code&gt;）&lt;/td&gt;
          &lt;td&gt;直接运行的程序&lt;/td&gt;
          &lt;td&gt;分析 Linux/ARM 嵌入式设备的二进制逻辑&lt;/td&gt;
          &lt;td&gt;ARM32/64 位设备的可执行文件需对应架构&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;共享目标文件（SO）&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.so&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;供其他程序动态调用的库（代码复用 + 保护）&lt;/td&gt;
          &lt;td&gt;逆向 Android 的&lt;code&gt;libnative.so&lt;/code&gt;（核心逻辑载体）&lt;/td&gt;
          &lt;td&gt;Android SO 分&lt;code&gt;armeabi-v7a&lt;/code&gt;（ARM32）、&lt;code&gt;arm64-v8a&lt;/code&gt;（ARM64）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;目标文件&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.o&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;编译后的中间文件（未链接）&lt;/td&gt;
          &lt;td&gt;分析编译后的单个模块代码（如 NDK 编译的&lt;code&gt;xxx.o&lt;/code&gt;）&lt;/td&gt;
          &lt;td&gt;ARM 编译器（如&lt;code&gt;arm-linux-androideabi-gcc&lt;/code&gt;）生成对应.o&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;核心转储文件&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.core&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;程序崩溃时的内存快照&lt;/td&gt;
          &lt;td&gt;分析 SO 崩溃原因（如空指针访问导致的 core dump）&lt;/td&gt;
          &lt;td&gt;ARM 设备崩溃时生成的 core 需用 ARM 架构的 gdb 分析&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt; 是基于 &lt;strong&gt;Linux&lt;/strong&gt; 内核开发的操作系统，所以 &lt;strong&gt;Android&lt;/strong&gt; 平台上的可执行文件格式和 &lt;strong&gt;Unix/Linux&lt;/strong&gt; 是一致的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;so文件大体上可分为四部分，一般来说从上往下是&lt;code&gt;ELF头部-&amp;gt;Pargarm头部-&amp;gt;节区(Section)-&amp;gt;节区头&lt;/code&gt;，其中，除了&lt;code&gt;ELF头部&lt;/code&gt;在文件位置固定不变外，其余三部分的位置都不固定。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体结构图参考非虫大佬的图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/windy-purple/blog_picture_bed//soparser/1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2so-文件的加载方法&#34;&gt;2.SO 文件的加载方法
&lt;/h2&gt;&lt;p&gt;Android 通过 Java 层的&lt;code&gt;System&lt;/code&gt;类加载 SO，核心方法有两种：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法&lt;/th&gt;
          &lt;th&gt;签名&lt;/th&gt;
          &lt;th&gt;特点&lt;/th&gt;
          &lt;th&gt;适用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;loadLibrary&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;System.loadLibrary(String name)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;自动拼接文件名（name → libname.so），从默认路径（如&lt;code&gt;/data/app/.../lib&lt;/code&gt;）加载。&lt;/td&gt;
          &lt;td&gt;应用内置 SO 的常规加载。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;load&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;System.load(String path)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;需传入 SO 的绝对路径（如&lt;code&gt;/sdcard/libtest.so&lt;/code&gt;）。&lt;/td&gt;
          &lt;td&gt;插件化加载、动态下载的 SO。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3so-文件的加载流程&#34;&gt;3.SO 文件的加载流程
&lt;/h2&gt;&lt;h3 id=&#34;loadlibrary-加载流程&#34;&gt;loadLibrary 加载流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;System.loadLibrary(String libName)&lt;/code&gt; 时，实际上会调用 &lt;code&gt;Runtime.getRuntime().loadLibrary(String libName)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Runtime.loadLibrary(String libName)&lt;/code&gt; 会进一步调用 &lt;code&gt;Runtime.loadLibrary(String libName, ClassLoader loader)&lt;/code&gt;，其中 &lt;code&gt;loader&lt;/code&gt; 是当前线程的类加载器。&lt;/li&gt;
&lt;li&gt;通过类加载器找到对应的 SO 文件路径，然后调用 &lt;code&gt;doLoad(String name, ClassLoader loader)&lt;/code&gt; 方法进行加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;load-加载流程&#34;&gt;load 加载流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;System.load(String pathName)&lt;/code&gt; 时，实际上会调用 &lt;code&gt;Runtime.getRuntime().load(String pathName)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Runtime.load(String pathName)&lt;/code&gt; 会调用 &lt;code&gt;Runtime.load(String pathName, ClassLoader loader)&lt;/code&gt;，同样会调用 &lt;code&gt;doLoad(String name, ClassLoader loader)&lt;/code&gt; 方法进行加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心加载流程doload&#34;&gt;核心加载流程：doLoad
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径处理&lt;/strong&gt;：&lt;code&gt;doLoad&lt;/code&gt; 方法会根据传入的路径和类加载器，确定 SO 文件的实际路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态链接库加载&lt;/strong&gt;：调用 &lt;code&gt;dlopen&lt;/code&gt; 函数加载动态链接库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JNI_OnLoad 调用&lt;/strong&gt;：如果 SO 文件中定义了 &lt;code&gt;JNI_OnLoad&lt;/code&gt; 函数，则在加载完成后调用该函数进行初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文件：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=1282554#34529205_%E5%85%AB%E3%80%81.symtab%E8%A7%A3%E6%9E%90&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Android so(ELF)文件解析&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.52pojie.cn/thread-1787667-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;《安卓逆向这档事》十、不是我说，有了IDA还要什么女朋友？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/2362433&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;android 加载so过程分析&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ctf-wiki.org/android/basic_operating_mechanism/native_layer/so/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;[ctfwiki]so 介绍&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
